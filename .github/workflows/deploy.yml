name: Build and Deploy to GKE

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REPO_NAME: ${{ secrets.ARTIFACT_REGISTRY_REPO }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GKE_CLUSTER_ZONE }}
  APP_IMAGE: restaurantapp

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        install_components: 'gke-gcloud-auth-plugin'

    - name: Configure Docker to use gcloud as a credential helper
      run: |-
        gcloud auth configure-docker us-west2-docker.pkg.dev

    - name: Build and Push Docker image
      run: |-
        APP_IMAGE_TAG="us-west2-docker.pkg.dev/$PROJECT_ID/$REPO_NAME/$APP_IMAGE:$GITHUB_SHA"
        echo "Building application image: $APP_IMAGE_TAG"
        docker build -t $APP_IMAGE .
        docker tag $APP_IMAGE $APP_IMAGE_TAG
        docker push $APP_IMAGE_TAG
        echo "APP_IMAGE_TAG=$APP_IMAGE_TAG" >> $GITHUB_ENV

    - name: Verify image exists in registry
      run: |-
        echo "Verifying application image exists..."
        if ! gcloud container images describe ${{ env.APP_IMAGE_TAG }}; then
          echo "Application image not found in registry"
          exit 1
        fi
        echo "Image verified successfully"

    - name: Get GKE credentials
      run: |-
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

    - name: Create Kubernetes secrets
      run: |-
        # Create secret for MongoDB URI
        kubectl create secret generic mongodb-uri \
          --from-literal=uri='${{ secrets.MONGO_URI }}' \
          --dry-run=client -o yaml | kubectl apply -f -

        # Create secret for Google Client ID
        kubectl create secret generic vite-google-client-id \
          --from-literal=client_id='${{ secrets.VITE_GOOGLE_CLIENT_ID }}' \
          --dry-run=client -o yaml | kubectl apply -f -

        # Create secret for Environment
        kubectl create secret generic ENVIRONMENT \
          --from-literal=environment='${{ secrets.ENVIRONMENT }}' \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Prepare deployment file
      run: |-
        # Debug: Print the image tag
        echo "Application image tag: ${{ env.APP_IMAGE_TAG }}"
        
        # Replace the image tag in the k8s template
        sed -i "s|RESTAURANTAPP_IMAGE_TAG|${{ env.APP_IMAGE_TAG }}|g" deployment.yaml
        
        # Debug: Print the modified deployment file
        echo "Modified deployment.yaml contents:"
        cat deployment.yaml

    - name: Validate deployment file
      run: |-
        echo "Validating deployment configuration..."
        if ! kubectl apply --dry-run=client -f deployment.yaml; then
          echo "Deployment file validation failed"
          exit 1
        fi
        echo "Deployment validation passed"

    - name: Deploy to GKE
      run: |-        
        # Apply resources in the correct order
        echo "Applying deployment..."
        kubectl apply -f deployment.yaml
        
        echo "Applying services..."
        kubectl apply -f service.yaml
        
        echo "Applying certificate..."
        kubectl apply -f certificate.yaml
        
        echo "Applying ingress..."
        kubectl apply -f ingress.yaml
        
        # Verify deployment
        echo "Verifying deployment..."
        kubectl rollout status deployment/restaurantapp
        
        # Verify services
        echo "Verifying services..."
        kubectl get services -o wide
        
        # Verify ingress
        echo "Verifying ingress..."
        kubectl get ingress