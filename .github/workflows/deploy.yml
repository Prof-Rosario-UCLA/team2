name: Build and Deploy to GKE

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REPO_NAME: ${{ secrets.ARTIFACT_REGISTRY_REPO }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GKE_CLUSTER_ZONE }}
  FRONTEND_IMAGE: restaurantapp-frontend
  BACKEND_IMAGE: restaurantapp-backend

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        install_components: 'gke-gcloud-auth-plugin'

    - name: Configure Docker to use gcloud as a credential helper
      run: |-
        gcloud auth configure-docker us-west2-docker.pkg.dev

    - name: Build and Push Frontend Docker image
      run: |-
        FRONTEND_IMAGE_TAG="us-west2-docker.pkg.dev/$PROJECT_ID/$REPO_NAME/$FRONTEND_IMAGE:$GITHUB_SHA"
        echo "Building frontend image: $FRONTEND_IMAGE_TAG"
        docker build -t $FRONTEND_IMAGE -f frontend.Dockerfile .
        docker tag $FRONTEND_IMAGE $FRONTEND_IMAGE_TAG
        docker push $FRONTEND_IMAGE_TAG
        echo "FRONTEND_IMAGE_TAG=$FRONTEND_IMAGE_TAG" >> $GITHUB_ENV

    - name: Build and Push Backend Docker image
      run: |-
        BACKEND_IMAGE_TAG="us-west2-docker.pkg.dev/$PROJECT_ID/$REPO_NAME/$BACKEND_IMAGE:$GITHUB_SHA"
        echo "Building backend image: $BACKEND_IMAGE_TAG"
        docker build -t $BACKEND_IMAGE -f backend.Dockerfile .
        docker tag $BACKEND_IMAGE $BACKEND_IMAGE_TAG
        docker push $BACKEND_IMAGE_TAG
        echo "BACKEND_IMAGE_TAG=$BACKEND_IMAGE_TAG" >> $GITHUB_ENV

    - name: Verify images exist in registry
      run: |-
        echo "Verifying frontend image exists..."
        if ! gcloud container images describe ${{ env.FRONTEND_IMAGE_TAG }}; then
          echo "Frontend image not found in registry"
          exit 1
        fi
        
        echo "Verifying backend image exists..."
        if ! gcloud container images describe ${{ env.BACKEND_IMAGE_TAG }}; then
          echo "Backend image not found in registry"
          exit 1
        fi
        
        echo "Both images verified successfully"

    - name: Get GKE credentials
      run: |-
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

    - name: Create Kubernetes secrets
      run: |-
        # Create secret for MongoDB URI
        kubectl create secret generic mongodb-uri \
          --from-literal=uri='${{ secrets.MONGO_URI }}' \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Create secret for Google Client ID
        kubectl create secret generic app-secrets \
          --from-literal=VITE_GOOGLE_CLIENT_ID='${{ secrets.VITE_GOOGLE_CLIENT_ID }}' \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Prepare deployment file
      run: |-
        # Debug: Print the image tags
        echo "Frontend image tag: ${{ env.FRONTEND_IMAGE_TAG }}"
        echo "Backend image tag: ${{ env.BACKEND_IMAGE_TAG }}"
        
        # Replace the image tags in the k8s template
        sed -i "s|FRONTEND_IMAGE_TAG|${{ env.FRONTEND_IMAGE_TAG }}|g" deployment.yaml
        sed -i "s|BACKEND_IMAGE_TAG|${{ env.BACKEND_IMAGE_TAG }}|g" deployment.yaml
        
        # Debug: Print the modified deployment file
        echo "Modified deployment.yaml contents:"
        cat deployment.yaml

    - name: Validate deployment file
      run: |-
        echo "Validating deployment configuration..."
        if ! kubectl apply --dry-run=client -f deployment.yaml; then
          echo "Deployment file validation failed"
          exit 1
        fi
        echo "Deployment validation passed"

    - name: Deploy to GKE
      run: |-        
        # Apply the deployment
        kubectl apply -f deployment.yaml
        
        # Verify deployment
        kubectl rollout status deployment/restaurantapp-frontend
        kubectl rollout status deployment/restaurantapp-backend
        kubectl get services -o wide